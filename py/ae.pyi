"""
auto engine
"""
from __future__ import annotations
import typing
__all__ = ['invalid_argument', 'op', 'runtime_err', 'tensor']
class invalid_argument(Exception):
    pass
class op:
    @typing.overload
    def __add__(self, arg0: op) -> op:
        ...
    @typing.overload
    def __add__(self, arg0: float) -> op:
        ...
    @typing.overload
    def __mul__(self, arg0: op) -> op:
        ...
    @typing.overload
    def __mul__(self, arg0: float) -> op:
        ...
    @typing.overload
    def __pow__(self, arg0: op) -> op:
        ...
    @typing.overload
    def __pow__(self, arg0: float) -> op:
        ...
    def __repr__(self) -> str:
        ...
    @typing.overload
    def __sub__(self, arg0: op) -> op:
        ...
    @typing.overload
    def __sub__(self, arg0: float) -> op:
        ...
    @typing.overload
    def __truediv__(self, arg0: op) -> op:
        ...
    @typing.overload
    def __truediv__(self, arg0: float) -> op:
        ...
    def backward(self) -> None:
        ...
    def clear_grad(self) -> None:
        ...
    def clear_grad_graph(self) -> None:
        ...
    def cos(self) -> op:
        ...
    def create_grad_graph(self) -> None:
        ...
    def grad(self) -> op:
        ...
    def grad_graph(self) -> op:
        ...
    def inverse(self) -> op:
        ...
    def item(self) -> float:
        ...
    def log(self) -> op:
        ...
    def mm(self, arg0: op) -> op:
        ...
    def reshape(self, arg0: list[int]) -> op:
        ...
    def sin(self) -> op:
        ...
    def sum(self) -> op:
        ...
    def tolist(self) -> list:
        ...
    def transpose(self) -> op:
        ...
    def update(self, arg0: op) -> None:
        ...
class runtime_err(Exception):
    pass
def tensor(lst: list, requires_grad: bool = False) -> op:
    ...
